// <auto-generated />
using System;
using Hinode.Izumi.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Hinode.Izumi.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20210503143336_UpdateFoodModelChangeIndex")]
    partial class UpdateFoodModelChangeIndex
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.4")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("Hinode.Izumi.Data.Models.Achievement", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("Category")
                        .HasColumnType("integer")
                        .HasColumnName("category");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<long>("Number")
                        .HasColumnType("bigint")
                        .HasColumnName("number");

                    b.Property<int>("Reward")
                        .HasColumnType("integer")
                        .HasColumnName("reward");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("now()");

                    b.HasKey("Id")
                        .HasName("pk_achievements");

                    b.HasIndex("Type")
                        .IsUnique()
                        .HasDatabaseName("ix_achievements_type");

                    b.ToTable("achievements");
                });

            modelBuilder.Entity("Hinode.Izumi.Data.Models.Alcohol", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<long>("Time")
                        .HasColumnType("bigint")
                        .HasColumnName("time");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("now()");

                    b.HasKey("Id")
                        .HasName("pk_alcohols");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_alcohols_name");

                    b.ToTable("alcohols");
                });

            modelBuilder.Entity("Hinode.Izumi.Data.Models.AlcoholIngredient", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("AlcoholId")
                        .HasColumnType("bigint")
                        .HasColumnName("alcohol_id");

                    b.Property<long>("Amount")
                        .HasColumnType("bigint")
                        .HasColumnName("amount");

                    b.Property<int>("Category")
                        .HasColumnType("integer")
                        .HasColumnName("category");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<long>("IngredientId")
                        .HasColumnType("bigint")
                        .HasColumnName("ingredient_id");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("now()");

                    b.HasKey("Id")
                        .HasName("pk_alcohol_ingredients");

                    b.HasIndex("AlcoholId", "Category", "IngredientId")
                        .IsUnique()
                        .HasDatabaseName("ix_alcohol_ingredients_alcohol_id_category_ingredient_id");

                    b.ToTable("alcohol_ingredients");
                });

            modelBuilder.Entity("Hinode.Izumi.Data.Models.AlcoholProperty", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("AlcoholId")
                        .HasColumnType("bigint")
                        .HasColumnName("alcohol_id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<long>("Mastery0")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnName("mastery0");

                    b.Property<long>("Mastery100")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnName("mastery100");

                    b.Property<long>("Mastery150")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnName("mastery150");

                    b.Property<long>("Mastery200")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnName("mastery200");

                    b.Property<long>("Mastery250")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnName("mastery250");

                    b.Property<long>("Mastery50")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnName("mastery50");

                    b.Property<int>("Property")
                        .HasColumnType("integer")
                        .HasColumnName("property");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("now()");

                    b.HasKey("Id")
                        .HasName("pk_alcohol_properties");

                    b.HasIndex("AlcoholId", "Property")
                        .IsUnique()
                        .HasDatabaseName("ix_alcohol_properties_alcohol_id_property");

                    b.ToTable("alcohol_properties");
                });

            modelBuilder.Entity("Hinode.Izumi.Data.Models.Banner", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<long>("Price")
                        .HasColumnType("bigint")
                        .HasColumnName("price");

                    b.Property<int>("Rarity")
                        .HasColumnType("integer")
                        .HasColumnName("rarity");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("url");

                    b.HasKey("Id")
                        .HasName("pk_banners");

                    b.ToTable("banners");
                });

            modelBuilder.Entity("Hinode.Izumi.Data.Models.Building", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("Category")
                        .HasColumnType("integer")
                        .HasColumnName("category");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<long?>("ProjectId")
                        .HasColumnType("bigint")
                        .HasColumnName("project_id");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("now()");

                    b.HasKey("Id")
                        .HasName("pk_buildings");

                    b.HasIndex("ProjectId")
                        .HasDatabaseName("ix_buildings_project_id");

                    b.HasIndex("Type")
                        .IsUnique()
                        .HasDatabaseName("ix_buildings_type");

                    b.ToTable("buildings");
                });

            modelBuilder.Entity("Hinode.Izumi.Data.Models.Card", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Anime")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("anime");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<int>("Effect")
                        .HasColumnType("integer")
                        .HasColumnName("effect");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("Rarity")
                        .HasColumnType("integer")
                        .HasColumnName("rarity");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("url");

                    b.HasKey("Id")
                        .HasName("pk_cards");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_cards_name");

                    b.ToTable("cards");
                });

            modelBuilder.Entity("Hinode.Izumi.Data.Models.Certificate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<long>("Price")
                        .HasColumnType("bigint")
                        .HasColumnName("price");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("now()");

                    b.HasKey("Id")
                        .HasName("pk_certificates");

                    b.HasIndex("Type")
                        .IsUnique()
                        .HasDatabaseName("ix_certificates_type");

                    b.ToTable("certificates");
                });

            modelBuilder.Entity("Hinode.Izumi.Data.Models.Contract", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<long>("Currency")
                        .HasColumnType("bigint")
                        .HasColumnName("currency");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<long>("Energy")
                        .HasColumnType("bigint")
                        .HasColumnName("energy");

                    b.Property<int>("Location")
                        .HasColumnType("integer")
                        .HasColumnName("location");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<long>("Reputation")
                        .HasColumnType("bigint")
                        .HasColumnName("reputation");

                    b.Property<long>("Time")
                        .HasColumnType("bigint")
                        .HasColumnName("time");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("now()");

                    b.HasKey("Id")
                        .HasName("pk_contracts");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_contracts_name");

                    b.ToTable("contracts");
                });

            modelBuilder.Entity("Hinode.Izumi.Data.Models.Crafting", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<int>("Location")
                        .HasColumnType("integer")
                        .HasColumnName("location");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<long>("Time")
                        .HasColumnType("bigint")
                        .HasColumnName("time");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("now()");

                    b.HasKey("Id")
                        .HasName("pk_craftings");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_craftings_name");

                    b.ToTable("craftings");
                });

            modelBuilder.Entity("Hinode.Izumi.Data.Models.CraftingIngredient", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("Amount")
                        .HasColumnType("bigint")
                        .HasColumnName("amount");

                    b.Property<int>("Category")
                        .HasColumnType("integer")
                        .HasColumnName("category");

                    b.Property<long>("CraftingId")
                        .HasColumnType("bigint")
                        .HasColumnName("crafting_id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<long>("IngredientId")
                        .HasColumnType("bigint")
                        .HasColumnName("ingredient_id");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("now()");

                    b.HasKey("Id")
                        .HasName("pk_crafting_ingredients");

                    b.HasIndex("CraftingId", "Category", "IngredientId")
                        .IsUnique()
                        .HasDatabaseName("ix_crafting_ingredients_crafting_id_category_ingredient_id");

                    b.ToTable("crafting_ingredients");
                });

            modelBuilder.Entity("Hinode.Izumi.Data.Models.CraftingProperty", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("CraftingId")
                        .HasColumnType("bigint")
                        .HasColumnName("crafting_id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<long>("Mastery0")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnName("mastery0");

                    b.Property<long>("Mastery100")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnName("mastery100");

                    b.Property<long>("Mastery150")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnName("mastery150");

                    b.Property<long>("Mastery200")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnName("mastery200");

                    b.Property<long>("Mastery250")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnName("mastery250");

                    b.Property<long>("Mastery50")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnName("mastery50");

                    b.Property<int>("Property")
                        .HasColumnType("integer")
                        .HasColumnName("property");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("now()");

                    b.HasKey("Id")
                        .HasName("pk_crafting_properties");

                    b.HasIndex("CraftingId", "Property")
                        .IsUnique()
                        .HasDatabaseName("ix_crafting_properties_crafting_id_property");

                    b.ToTable("crafting_properties");
                });

            modelBuilder.Entity("Hinode.Izumi.Data.Models.Crop", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<long>("Price")
                        .HasColumnType("bigint")
                        .HasColumnName("price");

                    b.Property<long>("SeedId")
                        .HasColumnType("bigint")
                        .HasColumnName("seed_id");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("now()");

                    b.HasKey("Id")
                        .HasName("pk_crops");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_crops_name");

                    b.HasIndex("SeedId")
                        .HasDatabaseName("ix_crops_seed_id");

                    b.ToTable("crops");
                });

            modelBuilder.Entity("Hinode.Izumi.Data.Models.DiscordModels.DiscordChannel", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<int>("Channel")
                        .HasColumnType("integer")
                        .HasColumnName("channel");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("now()");

                    b.HasKey("Id")
                        .HasName("pk_discord_channels");

                    b.HasIndex("Channel")
                        .IsUnique()
                        .HasDatabaseName("ix_discord_channels_channel");

                    b.ToTable("discord_channels");
                });

            modelBuilder.Entity("Hinode.Izumi.Data.Models.DiscordModels.DiscordRole", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<int>("Role")
                        .HasColumnType("integer")
                        .HasColumnName("role");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("now()");

                    b.HasKey("Id")
                        .HasName("pk_discord_roles");

                    b.HasIndex("Role")
                        .IsUnique()
                        .HasDatabaseName("ix_discord_roles_role");

                    b.ToTable("discord_roles");
                });

            modelBuilder.Entity("Hinode.Izumi.Data.Models.Drink", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<long>("Time")
                        .HasColumnType("bigint")
                        .HasColumnName("time");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("now()");

                    b.HasKey("Id")
                        .HasName("pk_drinks");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_drinks_name");

                    b.ToTable("drinks");
                });

            modelBuilder.Entity("Hinode.Izumi.Data.Models.DrinkIngredient", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("Amount")
                        .HasColumnType("bigint")
                        .HasColumnName("amount");

                    b.Property<int>("Category")
                        .HasColumnType("integer")
                        .HasColumnName("category");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<long>("DrinkId")
                        .HasColumnType("bigint")
                        .HasColumnName("drink_id");

                    b.Property<long>("IngredientId")
                        .HasColumnType("bigint")
                        .HasColumnName("ingredient_id");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("now()");

                    b.HasKey("Id")
                        .HasName("pk_drink_ingredients");

                    b.HasIndex("DrinkId", "Category", "IngredientId")
                        .IsUnique()
                        .HasDatabaseName("ix_drink_ingredients_drink_id_category_ingredient_id");

                    b.ToTable("drink_ingredients");
                });

            modelBuilder.Entity("Hinode.Izumi.Data.Models.DynamicShopBanner", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("BannerId")
                        .HasColumnType("bigint")
                        .HasColumnName("banner_id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("now()");

                    b.HasKey("Id")
                        .HasName("pk_dynamic_shop_banners");

                    b.HasIndex("BannerId")
                        .IsUnique()
                        .HasDatabaseName("ix_dynamic_shop_banners_banner_id");

                    b.ToTable("dynamic_shop_banners");
                });

            modelBuilder.Entity("Hinode.Izumi.Data.Models.Emote", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("now()");

                    b.HasKey("Id")
                        .HasName("pk_emotes");

                    b.HasIndex("Id", "Name")
                        .IsUnique()
                        .HasDatabaseName("ix_emotes_id_name");

                    b.ToTable("emotes");
                });

            modelBuilder.Entity("Hinode.Izumi.Data.Models.FamilyModels.Family", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("now()");

                    b.HasKey("Id")
                        .HasName("pk_families");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_families_name");

                    b.ToTable("families");
                });

            modelBuilder.Entity("Hinode.Izumi.Data.Models.FamilyModels.FamilyBuilding", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("BuildingId")
                        .HasColumnType("bigint")
                        .HasColumnName("building_id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<long>("FamilyId")
                        .HasColumnType("bigint")
                        .HasColumnName("family_id");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("now()");

                    b.HasKey("Id")
                        .HasName("pk_family_buildings");

                    b.HasIndex("BuildingId")
                        .HasDatabaseName("ix_family_buildings_building_id");

                    b.HasIndex("FamilyId", "BuildingId")
                        .IsUnique()
                        .HasDatabaseName("ix_family_buildings_family_id_building_id");

                    b.ToTable("family_buildings");
                });

            modelBuilder.Entity("Hinode.Izumi.Data.Models.FamilyModels.FamilyCurrency", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("Amount")
                        .HasColumnType("bigint")
                        .HasColumnName("amount");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<int>("Currency")
                        .HasColumnType("integer")
                        .HasColumnName("currency");

                    b.Property<long>("FamilyId")
                        .HasColumnType("bigint")
                        .HasColumnName("family_id");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("now()");

                    b.HasKey("Id")
                        .HasName("pk_family_currencies");

                    b.HasIndex("FamilyId", "Currency")
                        .IsUnique()
                        .HasDatabaseName("ix_family_currencies_family_id_currency");

                    b.ToTable("family_currencies");
                });

            modelBuilder.Entity("Hinode.Izumi.Data.Models.FamilyModels.FamilyInvite", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<long>("FamilyId")
                        .HasColumnType("bigint")
                        .HasColumnName("family_id");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("now()");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_family_invites");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_family_invites_user_id");

                    b.HasIndex("FamilyId", "UserId")
                        .IsUnique()
                        .HasDatabaseName("ix_family_invites_family_id_user_id");

                    b.ToTable("family_invites");
                });

            modelBuilder.Entity("Hinode.Izumi.Data.Models.Fish", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<long>("Price")
                        .HasColumnType("bigint")
                        .HasColumnName("price");

                    b.Property<int>("Rarity")
                        .HasColumnType("integer")
                        .HasColumnName("rarity");

                    b.Property<int[]>("Seasons")
                        .IsRequired()
                        .HasColumnType("integer[]")
                        .HasColumnName("seasons");

                    b.Property<int>("TimesDay")
                        .HasColumnType("integer")
                        .HasColumnName("times_day");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("now()");

                    b.Property<int>("Weather")
                        .HasColumnType("integer")
                        .HasColumnName("weather");

                    b.HasKey("Id")
                        .HasName("pk_fishes");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_fishes_name");

                    b.ToTable("fishes");
                });

            modelBuilder.Entity("Hinode.Izumi.Data.Models.Food", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<bool>("Event")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("event");

                    b.Property<long>("Mastery")
                        .HasColumnType("bigint")
                        .HasColumnName("mastery");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<bool>("RecipeSellable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("recipe_sellable");

                    b.Property<long>("Time")
                        .HasColumnType("bigint")
                        .HasColumnName("time");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("now()");

                    b.HasKey("Id")
                        .HasName("pk_foods");

                    b.HasIndex("Name", "Event")
                        .IsUnique()
                        .HasDatabaseName("ix_foods_name_event");

                    b.ToTable("foods");
                });

            modelBuilder.Entity("Hinode.Izumi.Data.Models.FoodIngredient", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("Amount")
                        .HasColumnType("bigint")
                        .HasColumnName("amount");

                    b.Property<int>("Category")
                        .HasColumnType("integer")
                        .HasColumnName("category");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<long>("FoodId")
                        .HasColumnType("bigint")
                        .HasColumnName("food_id");

                    b.Property<long>("IngredientId")
                        .HasColumnType("bigint")
                        .HasColumnName("ingredient_id");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("now()");

                    b.HasKey("Id")
                        .HasName("pk_food_ingredients");

                    b.HasIndex("FoodId", "Category", "IngredientId")
                        .IsUnique()
                        .HasDatabaseName("ix_food_ingredients_food_id_category_ingredient_id");

                    b.ToTable("food_ingredients");
                });

            modelBuilder.Entity("Hinode.Izumi.Data.Models.Gathering", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<int>("Location")
                        .HasColumnType("integer")
                        .HasColumnName("location");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<long>("Price")
                        .HasColumnType("bigint")
                        .HasColumnName("price");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("now()");

                    b.HasKey("Id")
                        .HasName("pk_gatherings");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_gatherings_name");

                    b.ToTable("gatherings");
                });

            modelBuilder.Entity("Hinode.Izumi.Data.Models.GatheringProperty", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<long>("GatheringId")
                        .HasColumnType("bigint")
                        .HasColumnName("gathering_id");

                    b.Property<long>("Mastery0")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnName("mastery0");

                    b.Property<long>("Mastery100")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnName("mastery100");

                    b.Property<long>("Mastery150")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnName("mastery150");

                    b.Property<long>("Mastery200")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnName("mastery200");

                    b.Property<long>("Mastery250")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnName("mastery250");

                    b.Property<long>("Mastery50")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnName("mastery50");

                    b.Property<int>("Property")
                        .HasColumnType("integer")
                        .HasColumnName("property");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("now()");

                    b.HasKey("Id")
                        .HasName("pk_gathering_properties");

                    b.HasIndex("GatheringId", "Property")
                        .IsUnique()
                        .HasDatabaseName("ix_gathering_properties_gathering_id_property");

                    b.ToTable("gathering_properties");
                });

            modelBuilder.Entity("Hinode.Izumi.Data.Models.Image", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("url");

                    b.HasKey("Id")
                        .HasName("pk_images");

                    b.ToTable("images");
                });

            modelBuilder.Entity("Hinode.Izumi.Data.Models.Localization", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("Category")
                        .HasColumnType("integer")
                        .HasColumnName("category");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Double")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("double");

                    b.Property<long>("ItemId")
                        .HasColumnType("bigint")
                        .HasColumnName("item_id");

                    b.Property<string>("Multiply")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("multiply");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Single")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("single");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("now()");

                    b.HasKey("Id")
                        .HasName("pk_localizations");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_localizations_name");

                    b.ToTable("localizations");
                });

            modelBuilder.Entity("Hinode.Izumi.Data.Models.MarketRequest", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("Amount")
                        .HasColumnType("bigint")
                        .HasColumnName("amount");

                    b.Property<int>("Category")
                        .HasColumnType("integer")
                        .HasColumnName("category");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<long>("ItemId")
                        .HasColumnType("bigint")
                        .HasColumnName("item_id");

                    b.Property<long>("Price")
                        .HasColumnType("bigint")
                        .HasColumnName("price");

                    b.Property<bool>("Selling")
                        .HasColumnType("boolean")
                        .HasColumnName("selling");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("now()");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_market_requests");

                    b.HasIndex("UserId", "Category", "ItemId")
                        .IsUnique()
                        .HasDatabaseName("ix_market_requests_user_id_category_item_id");

                    b.ToTable("market_requests");
                });

            modelBuilder.Entity("Hinode.Izumi.Data.Models.MasteryProperty", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<long>("Mastery0")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnName("mastery0");

                    b.Property<long>("Mastery100")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnName("mastery100");

                    b.Property<long>("Mastery150")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnName("mastery150");

                    b.Property<long>("Mastery200")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnName("mastery200");

                    b.Property<long>("Mastery250")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnName("mastery250");

                    b.Property<long>("Mastery50")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnName("mastery50");

                    b.Property<int>("Property")
                        .HasColumnType("integer")
                        .HasColumnName("property");

                    b.Property<int>("PropertyCategory")
                        .HasColumnType("integer")
                        .HasColumnName("property_category");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("now()");

                    b.HasKey("Id")
                        .HasName("pk_mastery_properties");

                    b.HasIndex("Property")
                        .IsUnique()
                        .HasDatabaseName("ix_mastery_properties_property");

                    b.ToTable("mastery_properties");
                });

            modelBuilder.Entity("Hinode.Izumi.Data.Models.MasteryXpProperty", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<double>("Mastery0")
                        .HasColumnType("double precision")
                        .HasColumnName("mastery0");

                    b.Property<double>("Mastery100")
                        .HasColumnType("double precision")
                        .HasColumnName("mastery100");

                    b.Property<double>("Mastery150")
                        .HasColumnType("double precision")
                        .HasColumnName("mastery150");

                    b.Property<double>("Mastery200")
                        .HasColumnType("double precision")
                        .HasColumnName("mastery200");

                    b.Property<double>("Mastery250")
                        .HasColumnType("double precision")
                        .HasColumnName("mastery250");

                    b.Property<double>("Mastery50")
                        .HasColumnType("double precision")
                        .HasColumnName("mastery50");

                    b.Property<int>("Property")
                        .HasColumnType("integer")
                        .HasColumnName("property");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("now()");

                    b.HasKey("Id")
                        .HasName("pk_mastery_xp_properties");

                    b.HasIndex("Property")
                        .IsUnique()
                        .HasDatabaseName("ix_mastery_xp_properties_property");

                    b.ToTable("mastery_xp_properties");
                });

            modelBuilder.Entity("Hinode.Izumi.Data.Models.Movement", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTimeOffset>("Arrival")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("arrival");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<int>("Departure")
                        .HasColumnType("integer")
                        .HasColumnName("departure");

                    b.Property<int>("Destination")
                        .HasColumnType("integer")
                        .HasColumnName("destination");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("now()");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_movements");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasDatabaseName("ix_movements_user_id");

                    b.ToTable("movements");
                });

            modelBuilder.Entity("Hinode.Izumi.Data.Models.Product", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<long>("Price")
                        .HasColumnType("bigint")
                        .HasColumnName("price");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("now()");

                    b.HasKey("Id")
                        .HasName("pk_products");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_products_name");

                    b.ToTable("products");
                });

            modelBuilder.Entity("Hinode.Izumi.Data.Models.Project", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<long>("Price")
                        .HasColumnType("bigint")
                        .HasColumnName("price");

                    b.Property<long?>("ReqBuildingId")
                        .HasColumnType("bigint")
                        .HasColumnName("req_building_id");

                    b.Property<long>("Time")
                        .HasColumnType("bigint")
                        .HasColumnName("time");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("now()");

                    b.HasKey("Id")
                        .HasName("pk_projects");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_projects_name");

                    b.HasIndex("ReqBuildingId")
                        .HasDatabaseName("ix_projects_req_building_id");

                    b.ToTable("projects");
                });

            modelBuilder.Entity("Hinode.Izumi.Data.Models.ProjectIngredient", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("Amount")
                        .HasColumnType("bigint")
                        .HasColumnName("amount");

                    b.Property<int>("Category")
                        .HasColumnType("integer")
                        .HasColumnName("category");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<long>("IngredientId")
                        .HasColumnType("bigint")
                        .HasColumnName("ingredient_id");

                    b.Property<long>("ProjectId")
                        .HasColumnType("bigint")
                        .HasColumnName("project_id");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("now()");

                    b.HasKey("Id")
                        .HasName("pk_project_ingredients");

                    b.HasIndex("ProjectId", "Category", "IngredientId")
                        .IsUnique()
                        .HasDatabaseName("ix_project_ingredients_project_id_category_ingredient_id");

                    b.ToTable("project_ingredients");
                });

            modelBuilder.Entity("Hinode.Izumi.Data.Models.Seed", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<long>("Growth")
                        .HasColumnType("bigint")
                        .HasColumnName("growth");

                    b.Property<bool>("Multiply")
                        .HasColumnType("boolean")
                        .HasColumnName("multiply");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<long>("Price")
                        .HasColumnType("bigint")
                        .HasColumnName("price");

                    b.Property<long>("ReGrowth")
                        .HasColumnType("bigint")
                        .HasColumnName("re_growth");

                    b.Property<int>("Season")
                        .HasColumnType("integer")
                        .HasColumnName("season");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("now()");

                    b.HasKey("Id")
                        .HasName("pk_seeds");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_seeds_name");

                    b.ToTable("seeds");
                });

            modelBuilder.Entity("Hinode.Izumi.Data.Models.Transit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<int>("Departure")
                        .HasColumnType("integer")
                        .HasColumnName("departure");

                    b.Property<int>("Destination")
                        .HasColumnType("integer")
                        .HasColumnName("destination");

                    b.Property<long>("Price")
                        .HasColumnType("bigint")
                        .HasColumnName("price");

                    b.Property<long>("Time")
                        .HasColumnType("bigint")
                        .HasColumnName("time");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("now()");

                    b.HasKey("Id")
                        .HasName("pk_transits");

                    b.HasIndex("Departure", "Destination")
                        .IsUnique()
                        .HasDatabaseName("ix_transits_departure_destination");

                    b.ToTable("transits");
                });

            modelBuilder.Entity("Hinode.Izumi.Data.Models.UserModels.User", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<string>("About")
                        .HasColumnType("text")
                        .HasColumnName("about");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<int>("Energy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(100)
                        .HasColumnName("energy");

                    b.Property<int>("Gender")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("gender");

                    b.Property<int>("Location")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1)
                        .HasColumnName("location");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<long>("Points")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnName("points");

                    b.Property<int>("Title")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1)
                        .HasColumnName("title");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("now()");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.ToTable("users");
                });

            modelBuilder.Entity("Hinode.Izumi.Data.Models.UserModels.UserAchievement", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("AchievementId")
                        .HasColumnType("bigint")
                        .HasColumnName("achievement_id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("now()");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_achievements");

                    b.HasIndex("AchievementId")
                        .HasDatabaseName("ix_user_achievements_achievement_id");

                    b.HasIndex("UserId", "AchievementId")
                        .IsUnique()
                        .HasDatabaseName("ix_user_achievements_user_id_achievement_id");

                    b.ToTable("user_achievements");
                });

            modelBuilder.Entity("Hinode.Izumi.Data.Models.UserModels.UserAlcohol", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("AlcoholId")
                        .HasColumnType("bigint")
                        .HasColumnName("alcohol_id");

                    b.Property<long>("Amount")
                        .HasColumnType("bigint")
                        .HasColumnName("amount");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("now()");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_alcohols");

                    b.HasIndex("AlcoholId")
                        .HasDatabaseName("ix_user_alcohols_alcohol_id");

                    b.HasIndex("UserId", "AlcoholId")
                        .IsUnique()
                        .HasDatabaseName("ix_user_alcohols_user_id_alcohol_id");

                    b.ToTable("user_alcohols");
                });

            modelBuilder.Entity("Hinode.Izumi.Data.Models.UserModels.UserBanner", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<long>("BannerId")
                        .HasColumnType("bigint")
                        .HasColumnName("banner_id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("now()");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_banners");

                    b.HasIndex("BannerId")
                        .HasDatabaseName("ix_user_banners_banner_id");

                    b.HasIndex("UserId", "BannerId")
                        .IsUnique()
                        .HasDatabaseName("ix_user_banners_user_id_banner_id");

                    b.ToTable("user_banners");
                });

            modelBuilder.Entity("Hinode.Izumi.Data.Models.UserModels.UserBox", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("Amount")
                        .HasColumnType("bigint")
                        .HasColumnName("amount");

                    b.Property<int>("Box")
                        .HasColumnType("integer")
                        .HasColumnName("box");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("now()");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_boxes");

                    b.HasIndex("UserId", "Box")
                        .IsUnique()
                        .HasDatabaseName("ix_user_boxes_user_id_box");

                    b.ToTable("user_boxes");
                });

            modelBuilder.Entity("Hinode.Izumi.Data.Models.UserModels.UserBuilding", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("BuildingId")
                        .HasColumnType("bigint")
                        .HasColumnName("building_id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("now()");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_buildings");

                    b.HasIndex("BuildingId")
                        .HasDatabaseName("ix_user_buildings_building_id");

                    b.HasIndex("UserId", "BuildingId")
                        .IsUnique()
                        .HasDatabaseName("ix_user_buildings_user_id_building_id");

                    b.ToTable("user_buildings");
                });

            modelBuilder.Entity("Hinode.Izumi.Data.Models.UserModels.UserCard", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("CardId")
                        .HasColumnType("bigint")
                        .HasColumnName("card_id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("now()");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_cards");

                    b.HasIndex("CardId")
                        .HasDatabaseName("ix_user_cards_card_id");

                    b.HasIndex("UserId", "CardId")
                        .IsUnique()
                        .HasDatabaseName("ix_user_cards_user_id_card_id");

                    b.ToTable("user_cards");
                });

            modelBuilder.Entity("Hinode.Izumi.Data.Models.UserModels.UserCertificate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("CertificateId")
                        .HasColumnType("bigint")
                        .HasColumnName("certificate_id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("now()");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_certificates");

                    b.HasIndex("CertificateId")
                        .HasDatabaseName("ix_user_certificates_certificate_id");

                    b.HasIndex("UserId", "CertificateId")
                        .IsUnique()
                        .HasDatabaseName("ix_user_certificates_user_id_certificate_id");

                    b.ToTable("user_certificates");
                });

            modelBuilder.Entity("Hinode.Izumi.Data.Models.UserModels.UserCollection", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("Category")
                        .HasColumnType("integer")
                        .HasColumnName("category");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<long>("ItemId")
                        .HasColumnType("bigint")
                        .HasColumnName("item_id");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("now()");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_collections");

                    b.HasIndex("UserId", "Category", "ItemId")
                        .IsUnique()
                        .HasDatabaseName("ix_user_collections_user_id_category_item_id");

                    b.ToTable("user_collections");
                });

            modelBuilder.Entity("Hinode.Izumi.Data.Models.UserModels.UserContract", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("ContractId")
                        .HasColumnType("bigint")
                        .HasColumnName("contract_id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("now()");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_contracts");

                    b.HasIndex("ContractId")
                        .HasDatabaseName("ix_user_contracts_contract_id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasDatabaseName("ix_user_contracts_user_id");

                    b.ToTable("user_contracts");
                });

            modelBuilder.Entity("Hinode.Izumi.Data.Models.UserModels.UserCooldown", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("Cooldown")
                        .HasColumnType("integer")
                        .HasColumnName("cooldown");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTimeOffset>("Expiration")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expiration");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("now()");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_cooldowns");

                    b.HasIndex("UserId", "Cooldown")
                        .IsUnique()
                        .HasDatabaseName("ix_user_cooldowns_user_id_cooldown");

                    b.ToTable("user_cooldowns");
                });

            modelBuilder.Entity("Hinode.Izumi.Data.Models.UserModels.UserCrafting", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("Amount")
                        .HasColumnType("bigint")
                        .HasColumnName("amount");

                    b.Property<long>("CraftingId")
                        .HasColumnType("bigint")
                        .HasColumnName("crafting_id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("now()");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_craftings");

                    b.HasIndex("CraftingId")
                        .HasDatabaseName("ix_user_craftings_crafting_id");

                    b.HasIndex("UserId", "CraftingId")
                        .IsUnique()
                        .HasDatabaseName("ix_user_craftings_user_id_crafting_id");

                    b.ToTable("user_craftings");
                });

            modelBuilder.Entity("Hinode.Izumi.Data.Models.UserModels.UserCrop", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("Amount")
                        .HasColumnType("bigint")
                        .HasColumnName("amount");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<long>("CropId")
                        .HasColumnType("bigint")
                        .HasColumnName("crop_id");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("now()");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_crops");

                    b.HasIndex("CropId")
                        .HasDatabaseName("ix_user_crops_crop_id");

                    b.HasIndex("UserId", "CropId")
                        .IsUnique()
                        .HasDatabaseName("ix_user_crops_user_id_crop_id");

                    b.ToTable("user_crops");
                });

            modelBuilder.Entity("Hinode.Izumi.Data.Models.UserModels.UserCurrency", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("Amount")
                        .HasColumnType("bigint")
                        .HasColumnName("amount");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<int>("Currency")
                        .HasColumnType("integer")
                        .HasColumnName("currency");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("now()");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_currencies");

                    b.HasIndex("UserId", "Currency")
                        .IsUnique()
                        .HasDatabaseName("ix_user_currencies_user_id_currency");

                    b.ToTable("user_currencies");
                });

            modelBuilder.Entity("Hinode.Izumi.Data.Models.UserModels.UserDeck", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("CardId")
                        .HasColumnType("bigint")
                        .HasColumnName("card_id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("now()");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_decks");

                    b.HasIndex("CardId")
                        .HasDatabaseName("ix_user_decks_card_id");

                    b.HasIndex("UserId", "CardId")
                        .IsUnique()
                        .HasDatabaseName("ix_user_decks_user_id_card_id");

                    b.ToTable("user_decks");
                });

            modelBuilder.Entity("Hinode.Izumi.Data.Models.UserModels.UserDrink", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("Amount")
                        .HasColumnType("bigint")
                        .HasColumnName("amount");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<long>("DrinkId")
                        .HasColumnType("bigint")
                        .HasColumnName("drink_id");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("now()");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_drinks");

                    b.HasIndex("DrinkId")
                        .HasDatabaseName("ix_user_drinks_drink_id");

                    b.HasIndex("UserId", "DrinkId")
                        .IsUnique()
                        .HasDatabaseName("ix_user_drinks_user_id_drink_id");

                    b.ToTable("user_drinks");
                });

            modelBuilder.Entity("Hinode.Izumi.Data.Models.UserModels.UserEffect", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("Category")
                        .HasColumnType("integer")
                        .HasColumnName("category");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<int>("Effect")
                        .HasColumnType("integer")
                        .HasColumnName("effect");

                    b.Property<DateTimeOffset?>("Expiration")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expiration");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("now()");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_effects");

                    b.HasIndex("UserId", "Effect")
                        .IsUnique()
                        .HasDatabaseName("ix_user_effects_user_id_effect");

                    b.ToTable("user_effects");
                });

            modelBuilder.Entity("Hinode.Izumi.Data.Models.UserModels.UserFamily", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<long>("FamilyId")
                        .HasColumnType("bigint")
                        .HasColumnName("family_id");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("now()");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_families");

                    b.HasIndex("FamilyId")
                        .HasDatabaseName("ix_user_families_family_id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasDatabaseName("ix_user_families_user_id");

                    b.ToTable("user_families");
                });

            modelBuilder.Entity("Hinode.Izumi.Data.Models.UserModels.UserField", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<long>("FieldId")
                        .HasColumnType("bigint")
                        .HasColumnName("field_id");

                    b.Property<long>("Progress")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnName("progress");

                    b.Property<bool>("ReGrowth")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("re_growth");

                    b.Property<long?>("SeedId")
                        .HasColumnType("bigint")
                        .HasColumnName("seed_id");

                    b.Property<int>("State")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("state");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("now()");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_fields");

                    b.HasIndex("SeedId")
                        .HasDatabaseName("ix_user_fields_seed_id");

                    b.HasIndex("UserId", "FieldId")
                        .IsUnique()
                        .HasDatabaseName("ix_user_fields_user_id_field_id");

                    b.ToTable("user_fields");
                });

            modelBuilder.Entity("Hinode.Izumi.Data.Models.UserModels.UserFish", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("Amount")
                        .HasColumnType("bigint")
                        .HasColumnName("amount");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<long>("FishId")
                        .HasColumnType("bigint")
                        .HasColumnName("fish_id");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("now()");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_fishes");

                    b.HasIndex("FishId")
                        .HasDatabaseName("ix_user_fishes_fish_id");

                    b.HasIndex("UserId", "FishId")
                        .IsUnique()
                        .HasDatabaseName("ix_user_fishes_user_id_fish_id");

                    b.ToTable("user_fishes");
                });

            modelBuilder.Entity("Hinode.Izumi.Data.Models.UserModels.UserFood", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("Amount")
                        .HasColumnType("bigint")
                        .HasColumnName("amount");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<long>("FoodId")
                        .HasColumnType("bigint")
                        .HasColumnName("food_id");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("now()");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_foods");

                    b.HasIndex("FoodId")
                        .HasDatabaseName("ix_user_foods_food_id");

                    b.HasIndex("UserId", "FoodId")
                        .IsUnique()
                        .HasDatabaseName("ix_user_foods_user_id_food_id");

                    b.ToTable("user_foods");
                });

            modelBuilder.Entity("Hinode.Izumi.Data.Models.UserModels.UserGathering", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("Amount")
                        .HasColumnType("bigint")
                        .HasColumnName("amount");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<long>("GatheringId")
                        .HasColumnType("bigint")
                        .HasColumnName("gathering_id");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("now()");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_gatherings");

                    b.HasIndex("GatheringId")
                        .HasDatabaseName("ix_user_gatherings_gathering_id");

                    b.HasIndex("UserId", "GatheringId")
                        .IsUnique()
                        .HasDatabaseName("ix_user_gatherings_user_id_gathering_id");

                    b.ToTable("user_gatherings");
                });

            modelBuilder.Entity("Hinode.Izumi.Data.Models.UserModels.UserMastery", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<double>("Amount")
                        .HasColumnType("double precision")
                        .HasColumnName("amount");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<int>("Mastery")
                        .HasColumnType("integer")
                        .HasColumnName("mastery");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("now()");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_masteries");

                    b.HasIndex("UserId", "Mastery")
                        .IsUnique()
                        .HasDatabaseName("ix_user_masteries_user_id_mastery");

                    b.ToTable("user_masteries");
                });

            modelBuilder.Entity("Hinode.Izumi.Data.Models.UserModels.UserProduct", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("Amount")
                        .HasColumnType("bigint")
                        .HasColumnName("amount");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint")
                        .HasColumnName("product_id");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("now()");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_products");

                    b.HasIndex("ProductId")
                        .HasDatabaseName("ix_user_products_product_id");

                    b.HasIndex("UserId", "ProductId")
                        .IsUnique()
                        .HasDatabaseName("ix_user_products_user_id_product_id");

                    b.ToTable("user_products");
                });

            modelBuilder.Entity("Hinode.Izumi.Data.Models.UserModels.UserProject", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<long>("ProjectId")
                        .HasColumnType("bigint")
                        .HasColumnName("project_id");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("now()");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_projects");

                    b.HasIndex("ProjectId")
                        .HasDatabaseName("ix_user_projects_project_id");

                    b.HasIndex("UserId", "ProjectId")
                        .IsUnique()
                        .HasDatabaseName("ix_user_projects_user_id_project_id");

                    b.ToTable("user_projects");
                });

            modelBuilder.Entity("Hinode.Izumi.Data.Models.UserModels.UserRecipe", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<long>("FoodId")
                        .HasColumnType("bigint")
                        .HasColumnName("food_id");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("now()");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_recipes");

                    b.HasIndex("FoodId")
                        .HasDatabaseName("ix_user_recipes_food_id");

                    b.HasIndex("UserId", "FoodId")
                        .IsUnique()
                        .HasDatabaseName("ix_user_recipes_user_id_food_id");

                    b.ToTable("user_recipes");
                });

            modelBuilder.Entity("Hinode.Izumi.Data.Models.UserModels.UserReferrer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<long>("ReferrerId")
                        .HasColumnType("bigint")
                        .HasColumnName("referrer_id");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("now()");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_referrers");

                    b.HasIndex("ReferrerId")
                        .HasDatabaseName("ix_user_referrers_referrer_id");

                    b.HasIndex("UserId", "ReferrerId")
                        .IsUnique()
                        .HasDatabaseName("ix_user_referrers_user_id_referrer_id");

                    b.ToTable("user_referrers");
                });

            modelBuilder.Entity("Hinode.Izumi.Data.Models.UserModels.UserReputation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("Amount")
                        .HasColumnType("bigint")
                        .HasColumnName("amount");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<int>("Reputation")
                        .HasColumnType("integer")
                        .HasColumnName("reputation");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("now()");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_reputations");

                    b.HasIndex("UserId", "Reputation")
                        .IsUnique()
                        .HasDatabaseName("ix_user_reputations_user_id_reputation");

                    b.ToTable("user_reputations");
                });

            modelBuilder.Entity("Hinode.Izumi.Data.Models.UserModels.UserSeed", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("Amount")
                        .HasColumnType("bigint")
                        .HasColumnName("amount");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<long>("SeedId")
                        .HasColumnType("bigint")
                        .HasColumnName("seed_id");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("now()");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_seeds");

                    b.HasIndex("SeedId")
                        .HasDatabaseName("ix_user_seeds_seed_id");

                    b.HasIndex("UserId", "SeedId")
                        .IsUnique()
                        .HasDatabaseName("ix_user_seeds_user_id_seed_id");

                    b.ToTable("user_seeds");
                });

            modelBuilder.Entity("Hinode.Izumi.Data.Models.UserModels.UserStatistic", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("Amount")
                        .HasColumnType("bigint")
                        .HasColumnName("amount");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<int>("Statistic")
                        .HasColumnType("integer")
                        .HasColumnName("statistic");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("now()");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_statistics");

                    b.HasIndex("UserId", "Statistic")
                        .IsUnique()
                        .HasDatabaseName("ix_user_statistics_user_id_statistic");

                    b.ToTable("user_statistics");
                });

            modelBuilder.Entity("Hinode.Izumi.Data.Models.UserModels.UserTitle", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<int>("Title")
                        .HasColumnType("integer")
                        .HasColumnName("title");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("now()");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_titles");

                    b.HasIndex("UserId", "Title")
                        .IsUnique()
                        .HasDatabaseName("ix_user_titles_user_id_title");

                    b.ToTable("user_titles");
                });

            modelBuilder.Entity("Hinode.Izumi.Data.Models.UserModels.UserTraining", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<int>("Step")
                        .HasColumnType("integer")
                        .HasColumnName("step");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("now()");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_trainings");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasDatabaseName("ix_user_trainings_user_id");

                    b.ToTable("user_trainings");
                });

            modelBuilder.Entity("Hinode.Izumi.Data.Models.WorldProperty", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<int>("Property")
                        .HasColumnType("integer")
                        .HasColumnName("property");

                    b.Property<int>("PropertyCategory")
                        .HasColumnType("integer")
                        .HasColumnName("property_category");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("now()");

                    b.Property<long>("Value")
                        .HasColumnType("bigint")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("pk_world_properties");

                    b.HasIndex("Property")
                        .IsUnique()
                        .HasDatabaseName("ix_world_properties_property");

                    b.ToTable("world_properties");
                });

            modelBuilder.Entity("Hinode.Izumi.Data.Models.AlcoholIngredient", b =>
                {
                    b.HasOne("Hinode.Izumi.Data.Models.Alcohol", "Alcohol")
                        .WithMany()
                        .HasForeignKey("AlcoholId")
                        .HasConstraintName("fk_alcohol_ingredients_alcohols_alcohol_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Alcohol");
                });

            modelBuilder.Entity("Hinode.Izumi.Data.Models.AlcoholProperty", b =>
                {
                    b.HasOne("Hinode.Izumi.Data.Models.Alcohol", "Alcohol")
                        .WithMany()
                        .HasForeignKey("AlcoholId")
                        .HasConstraintName("fk_alcohol_properties_alcohols_alcohol_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Alcohol");
                });

            modelBuilder.Entity("Hinode.Izumi.Data.Models.Building", b =>
                {
                    b.HasOne("Hinode.Izumi.Data.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("fk_buildings_project_project_id");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Hinode.Izumi.Data.Models.CraftingIngredient", b =>
                {
                    b.HasOne("Hinode.Izumi.Data.Models.Crafting", "Crafting")
                        .WithMany()
                        .HasForeignKey("CraftingId")
                        .HasConstraintName("fk_crafting_ingredients_craftings_crafting_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Crafting");
                });

            modelBuilder.Entity("Hinode.Izumi.Data.Models.CraftingProperty", b =>
                {
                    b.HasOne("Hinode.Izumi.Data.Models.Crafting", "Crafting")
                        .WithMany()
                        .HasForeignKey("CraftingId")
                        .HasConstraintName("fk_crafting_properties_craftings_crafting_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Crafting");
                });

            modelBuilder.Entity("Hinode.Izumi.Data.Models.Crop", b =>
                {
                    b.HasOne("Hinode.Izumi.Data.Models.Seed", "Seed")
                        .WithMany()
                        .HasForeignKey("SeedId")
                        .HasConstraintName("fk_crops_seed_seed_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Seed");
                });

            modelBuilder.Entity("Hinode.Izumi.Data.Models.DrinkIngredient", b =>
                {
                    b.HasOne("Hinode.Izumi.Data.Models.Drink", "Drink")
                        .WithMany()
                        .HasForeignKey("DrinkId")
                        .HasConstraintName("fk_drink_ingredients_drinks_drink_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Drink");
                });

            modelBuilder.Entity("Hinode.Izumi.Data.Models.DynamicShopBanner", b =>
                {
                    b.HasOne("Hinode.Izumi.Data.Models.Banner", "Banner")
                        .WithMany()
                        .HasForeignKey("BannerId")
                        .HasConstraintName("fk_dynamic_shop_banners_banners_banner_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Banner");
                });

            modelBuilder.Entity("Hinode.Izumi.Data.Models.FamilyModels.FamilyBuilding", b =>
                {
                    b.HasOne("Hinode.Izumi.Data.Models.Building", "Building")
                        .WithMany()
                        .HasForeignKey("BuildingId")
                        .HasConstraintName("fk_family_buildings_buildings_building_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hinode.Izumi.Data.Models.FamilyModels.Family", "Family")
                        .WithMany()
                        .HasForeignKey("FamilyId")
                        .HasConstraintName("fk_family_buildings_family_family_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Building");

                    b.Navigation("Family");
                });

            modelBuilder.Entity("Hinode.Izumi.Data.Models.FamilyModels.FamilyCurrency", b =>
                {
                    b.HasOne("Hinode.Izumi.Data.Models.FamilyModels.Family", "Family")
                        .WithMany()
                        .HasForeignKey("FamilyId")
                        .HasConstraintName("fk_family_currencies_families_family_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Family");
                });

            modelBuilder.Entity("Hinode.Izumi.Data.Models.FamilyModels.FamilyInvite", b =>
                {
                    b.HasOne("Hinode.Izumi.Data.Models.FamilyModels.Family", "Family")
                        .WithMany()
                        .HasForeignKey("FamilyId")
                        .HasConstraintName("fk_family_invites_families_family_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hinode.Izumi.Data.Models.UserModels.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_family_invites_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Family");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Hinode.Izumi.Data.Models.FoodIngredient", b =>
                {
                    b.HasOne("Hinode.Izumi.Data.Models.Food", "Food")
                        .WithMany()
                        .HasForeignKey("FoodId")
                        .HasConstraintName("fk_food_ingredients_foods_food_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Food");
                });

            modelBuilder.Entity("Hinode.Izumi.Data.Models.GatheringProperty", b =>
                {
                    b.HasOne("Hinode.Izumi.Data.Models.Gathering", "Gathering")
                        .WithMany()
                        .HasForeignKey("GatheringId")
                        .HasConstraintName("fk_gathering_properties_gatherings_gathering_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gathering");
                });

            modelBuilder.Entity("Hinode.Izumi.Data.Models.MarketRequest", b =>
                {
                    b.HasOne("Hinode.Izumi.Data.Models.UserModels.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_market_requests_user_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Hinode.Izumi.Data.Models.Movement", b =>
                {
                    b.HasOne("Hinode.Izumi.Data.Models.UserModels.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_movements_user_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Hinode.Izumi.Data.Models.Project", b =>
                {
                    b.HasOne("Hinode.Izumi.Data.Models.Building", "Building")
                        .WithMany()
                        .HasForeignKey("ReqBuildingId")
                        .HasConstraintName("fk_buildings_project_project_id1");

                    b.Navigation("Building");
                });

            modelBuilder.Entity("Hinode.Izumi.Data.Models.ProjectIngredient", b =>
                {
                    b.HasOne("Hinode.Izumi.Data.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("fk_project_ingredients_projects_project_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Hinode.Izumi.Data.Models.UserModels.UserAchievement", b =>
                {
                    b.HasOne("Hinode.Izumi.Data.Models.Achievement", "Achievement")
                        .WithMany()
                        .HasForeignKey("AchievementId")
                        .HasConstraintName("fk_user_achievements_achievements_achievement_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hinode.Izumi.Data.Models.UserModels.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_user_achievements_user_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Achievement");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Hinode.Izumi.Data.Models.UserModels.UserAlcohol", b =>
                {
                    b.HasOne("Hinode.Izumi.Data.Models.Alcohol", "Alcohol")
                        .WithMany()
                        .HasForeignKey("AlcoholId")
                        .HasConstraintName("fk_user_alcohols_alcohols_alcohol_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hinode.Izumi.Data.Models.UserModels.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_user_alcohols_user_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Alcohol");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Hinode.Izumi.Data.Models.UserModels.UserBanner", b =>
                {
                    b.HasOne("Hinode.Izumi.Data.Models.Banner", "Banner")
                        .WithMany()
                        .HasForeignKey("BannerId")
                        .HasConstraintName("fk_user_banners_banners_banner_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hinode.Izumi.Data.Models.UserModels.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_user_banners_user_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Banner");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Hinode.Izumi.Data.Models.UserModels.UserBox", b =>
                {
                    b.HasOne("Hinode.Izumi.Data.Models.UserModels.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_user_boxes_user_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Hinode.Izumi.Data.Models.UserModels.UserBuilding", b =>
                {
                    b.HasOne("Hinode.Izumi.Data.Models.Building", "Building")
                        .WithMany()
                        .HasForeignKey("BuildingId")
                        .HasConstraintName("fk_user_buildings_buildings_building_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hinode.Izumi.Data.Models.UserModels.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_user_buildings_user_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Building");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Hinode.Izumi.Data.Models.UserModels.UserCard", b =>
                {
                    b.HasOne("Hinode.Izumi.Data.Models.Card", "Card")
                        .WithMany()
                        .HasForeignKey("CardId")
                        .HasConstraintName("fk_user_cards_cards_card_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hinode.Izumi.Data.Models.UserModels.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_user_cards_user_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Card");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Hinode.Izumi.Data.Models.UserModels.UserCertificate", b =>
                {
                    b.HasOne("Hinode.Izumi.Data.Models.Certificate", "Certificate")
                        .WithMany()
                        .HasForeignKey("CertificateId")
                        .HasConstraintName("fk_user_certificates_certificates_certificate_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hinode.Izumi.Data.Models.UserModels.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_user_certificates_user_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Certificate");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Hinode.Izumi.Data.Models.UserModels.UserCollection", b =>
                {
                    b.HasOne("Hinode.Izumi.Data.Models.UserModels.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_user_collections_user_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Hinode.Izumi.Data.Models.UserModels.UserContract", b =>
                {
                    b.HasOne("Hinode.Izumi.Data.Models.Contract", "Contract")
                        .WithMany()
                        .HasForeignKey("ContractId")
                        .HasConstraintName("fk_user_contracts_contracts_contract_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hinode.Izumi.Data.Models.UserModels.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_user_contracts_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contract");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Hinode.Izumi.Data.Models.UserModels.UserCooldown", b =>
                {
                    b.HasOne("Hinode.Izumi.Data.Models.UserModels.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_user_cooldowns_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Hinode.Izumi.Data.Models.UserModels.UserCrafting", b =>
                {
                    b.HasOne("Hinode.Izumi.Data.Models.Crafting", "Crafting")
                        .WithMany()
                        .HasForeignKey("CraftingId")
                        .HasConstraintName("fk_user_craftings_craftings_crafting_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hinode.Izumi.Data.Models.UserModels.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_user_craftings_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Crafting");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Hinode.Izumi.Data.Models.UserModels.UserCrop", b =>
                {
                    b.HasOne("Hinode.Izumi.Data.Models.Crop", "Crop")
                        .WithMany()
                        .HasForeignKey("CropId")
                        .HasConstraintName("fk_user_crops_crops_crop_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hinode.Izumi.Data.Models.UserModels.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_user_crops_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Crop");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Hinode.Izumi.Data.Models.UserModels.UserCurrency", b =>
                {
                    b.HasOne("Hinode.Izumi.Data.Models.UserModels.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_user_currencies_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Hinode.Izumi.Data.Models.UserModels.UserDeck", b =>
                {
                    b.HasOne("Hinode.Izumi.Data.Models.Card", "Card")
                        .WithMany()
                        .HasForeignKey("CardId")
                        .HasConstraintName("fk_user_decks_cards_card_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hinode.Izumi.Data.Models.UserModels.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_user_decks_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Card");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Hinode.Izumi.Data.Models.UserModels.UserDrink", b =>
                {
                    b.HasOne("Hinode.Izumi.Data.Models.Drink", "Drink")
                        .WithMany()
                        .HasForeignKey("DrinkId")
                        .HasConstraintName("fk_user_drinks_drinks_drink_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hinode.Izumi.Data.Models.UserModels.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_user_drinks_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Drink");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Hinode.Izumi.Data.Models.UserModels.UserEffect", b =>
                {
                    b.HasOne("Hinode.Izumi.Data.Models.UserModels.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_user_effects_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Hinode.Izumi.Data.Models.UserModels.UserFamily", b =>
                {
                    b.HasOne("Hinode.Izumi.Data.Models.FamilyModels.Family", "Family")
                        .WithMany()
                        .HasForeignKey("FamilyId")
                        .HasConstraintName("fk_user_families_family_family_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hinode.Izumi.Data.Models.UserModels.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_user_families_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Family");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Hinode.Izumi.Data.Models.UserModels.UserField", b =>
                {
                    b.HasOne("Hinode.Izumi.Data.Models.Seed", "Seed")
                        .WithMany()
                        .HasForeignKey("SeedId")
                        .HasConstraintName("fk_user_fields_seeds_seed_id");

                    b.HasOne("Hinode.Izumi.Data.Models.UserModels.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_user_fields_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Seed");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Hinode.Izumi.Data.Models.UserModels.UserFish", b =>
                {
                    b.HasOne("Hinode.Izumi.Data.Models.Fish", "Fish")
                        .WithMany()
                        .HasForeignKey("FishId")
                        .HasConstraintName("fk_user_fishes_fishes_fish_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hinode.Izumi.Data.Models.UserModels.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_user_fishes_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Fish");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Hinode.Izumi.Data.Models.UserModels.UserFood", b =>
                {
                    b.HasOne("Hinode.Izumi.Data.Models.Food", "Food")
                        .WithMany()
                        .HasForeignKey("FoodId")
                        .HasConstraintName("fk_user_foods_foods_food_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hinode.Izumi.Data.Models.UserModels.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_user_foods_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Food");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Hinode.Izumi.Data.Models.UserModels.UserGathering", b =>
                {
                    b.HasOne("Hinode.Izumi.Data.Models.Gathering", "Gathering")
                        .WithMany()
                        .HasForeignKey("GatheringId")
                        .HasConstraintName("fk_user_gatherings_gatherings_gathering_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hinode.Izumi.Data.Models.UserModels.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_user_gatherings_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gathering");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Hinode.Izumi.Data.Models.UserModels.UserMastery", b =>
                {
                    b.HasOne("Hinode.Izumi.Data.Models.UserModels.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_user_masteries_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Hinode.Izumi.Data.Models.UserModels.UserProduct", b =>
                {
                    b.HasOne("Hinode.Izumi.Data.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .HasConstraintName("fk_user_products_products_product_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hinode.Izumi.Data.Models.UserModels.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_user_products_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Hinode.Izumi.Data.Models.UserModels.UserProject", b =>
                {
                    b.HasOne("Hinode.Izumi.Data.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("fk_user_projects_projects_project_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hinode.Izumi.Data.Models.UserModels.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_user_projects_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Hinode.Izumi.Data.Models.UserModels.UserRecipe", b =>
                {
                    b.HasOne("Hinode.Izumi.Data.Models.Food", "Food")
                        .WithMany()
                        .HasForeignKey("FoodId")
                        .HasConstraintName("fk_user_recipes_foods_food_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hinode.Izumi.Data.Models.UserModels.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_user_recipes_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Food");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Hinode.Izumi.Data.Models.UserModels.UserReferrer", b =>
                {
                    b.HasOne("Hinode.Izumi.Data.Models.UserModels.User", "Referrer")
                        .WithMany()
                        .HasForeignKey("ReferrerId")
                        .HasConstraintName("fk_user_referrers_users_referrer_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hinode.Izumi.Data.Models.UserModels.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_user_referrers_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Referrer");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Hinode.Izumi.Data.Models.UserModels.UserReputation", b =>
                {
                    b.HasOne("Hinode.Izumi.Data.Models.UserModels.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_user_reputations_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Hinode.Izumi.Data.Models.UserModels.UserSeed", b =>
                {
                    b.HasOne("Hinode.Izumi.Data.Models.Seed", "Seed")
                        .WithMany()
                        .HasForeignKey("SeedId")
                        .HasConstraintName("fk_user_seeds_seeds_seed_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hinode.Izumi.Data.Models.UserModels.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_user_seeds_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Seed");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Hinode.Izumi.Data.Models.UserModels.UserStatistic", b =>
                {
                    b.HasOne("Hinode.Izumi.Data.Models.UserModels.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_user_statistics_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Hinode.Izumi.Data.Models.UserModels.UserTitle", b =>
                {
                    b.HasOne("Hinode.Izumi.Data.Models.UserModels.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_user_titles_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Hinode.Izumi.Data.Models.UserModels.UserTraining", b =>
                {
                    b.HasOne("Hinode.Izumi.Data.Models.UserModels.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_user_trainings_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
